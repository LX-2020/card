//Assignment 1: Card games by Lexin Ma 1/15/2020

public class Foothill     
{
   public static void main(String[] args)
   {
      //phase 1 Card:
      Card card1, card2, card3;
      
      card1 = new Card();
      card2 = new Card('7', Card.Suit.clubs);
      card3 = new Card('9', Card.Suit.hearts);
      
      System.out.println(card1 + "\n" + card2 + "\n" + card3 + "\n--------\n");
     
      //phase 2 Hand: 
      Hand hand1 = new Hand();
      
      for(int i = 0 ; i < hand1.MAX_CARDS;)
      {
         hand1.takeCard(card1);
         i++;
         hand1.takeCard(card2);
         i++;
         hand1.takeCard(card3);
         i++;
      }
      
      hand1.inspectCard(4);
      hand1.inspectCard(53);
      
      System.out.println("\n" + hand1 + "\n");
      
      for(int i = hand1.getNum() ; i > 0; i--)
      
         hand1.playCard();
        
      if(hand1.getNum() == 0)
         
         System.out.println("Hand is empty!");
      

 
   }

}

//------* Card class *---------

public class Card
{
   public static enum Suit 
   { 
      clubs, diamonds, hearts, spades 
   };
   private Suit suit;
   private char value;
   private boolean cardError;
   
  
   Card()
   {
      this('A', Suit.spades);
   }
   
   Card(char value, Suit suit)
   {
      set(value, suit);
   }
   
   
   private boolean isValid(char value, Suit suit)
   {
      char upVal;  
      upVal = Character.toUpperCase(value);
      
      if(upVal == 'A' || upVal == 'K'
         || upVal == 'Q' || upVal == 'J'
         || upVal == 'T'
         || (upVal >= '2' && upVal <= '9'))
         
         return true;
      
      else 
         return false;
         
   }
  
   public boolean set(char value, Suit suit)
   {
      
      if ( isValid(value,suit) )
      { 
         this.value = Character.toUpperCase(value);
         this.suit = suit;
         this.cardError = false;
      }
      else
         this.cardError = true;
        
      return !cardError;   
    
    
   }
   

   public char getValue()
   {
      return this.value;
   }
   
   public Suit getSuit()
   {
      return this.suit;
   }
   

   public String toString()
   {
      String retVal;
      retVal =  String.valueOf(value);

      if (!set(value,suit))
         return "This card value " + retVal + "is invalid.";
      else 
         return retVal + " of " + suit + ",";
   }
   
  
   boolean equals(Card card)
   {
      if(this == card)
         return true;
      else return false;
      
   }
  

}

//-------* Hand class *--------

public class Hand
{
   public final int MAX_CARDS = 50;
   private int numCards;
   private Card[] myCards;

   Hand()
   { 
      numCards = 0;
      myCards = new Card[MAX_CARDS];
      
      for(int k = 0; k < MAX_CARDS; k++)
      {
         myCards[k] = new Card();
         
      }
   }
   
    
   public int getNum()
   {
      return numCards;
   }
  
   
   Card inspectCard(int k)
   {

      
      if(k >= 0 && k < getNum())
      {
         char nVal = myCards[k].getValue();
         Card.Suit suit = myCards[k].getSuit();
         Card temp = new Card(nVal, suit);
         System.out.println("This card is:" + temp);
         return temp;
      }
      else
         System.out.println(k + " is invalid,try another card.");
         return new Card('S', Card.Suit.spades);
     
     
   }
    
   void resetHand()
   {
     numCards = 0;
   }
   
   
   boolean takeCard(Card newCard)
   {
      char nVal = newCard.getValue();
      Card.Suit suit = newCard.getSuit();
      
      if(numCards < MAX_CARDS) 
      {
         if (myCards[numCards].set(nVal, suit))
            numCards++;
         
         return true;
      }   
 
         return false;
      
   }
   
   
   Card playCard()
   {
      Card temp = myCards[numCards-1];
      numCards --;
      System.out.println("Playing " + temp.toString());
      return temp;
   }
   
   
   public String toString()
   {
      String result = "This hand has: \n";
      for (int i = 0; i < myCards.length; i++)
      {
         result += myCards[i].toString();
      }
     return result;
   }
        
}

/*------- run from console window --------

A of spades,
7 of clubs,
9 of hearts,
--------

This card is:7 of clubs,
53 is invalid,try another card.

This hand has: 
A of spades,7 of clubs,9 of hearts,A of spades,7 of clubs,9 of hearts,A of spade
s,7 of clubs,9 of hearts,A of spades,7 of clubs,9 of hearts,A of spades,7 of clu
bs,9 of hearts,A of spades,7 of clubs,9 of hearts,A of spades,7 of clubs,9 of he
arts,A of spades,7 of clubs,9 of hearts,A of spades,7 of clubs,9 of hearts,A of 
spades,7 of clubs,9 of hearts,A of spades,7 of clubs,9 of hearts,A of spades,7 o
f clubs,9 of hearts,A of spades,7 of clubs,9 of hearts,A of spades,7 of clubs,9 
of hearts,A of spades,7 of clubs,9 of hearts,A of spades,7 of clubs,9 of hearts,
A of spades,7 of clubs,

Playing 7 of clubs,
Playing A of spades,
Playing 9 of hearts,
Playing 7 of clubs,
Playing A of spades,
Playing 9 of hearts,
Playing 7 of clubs,
Playing A of spades,
Playing 9 of hearts,
Playing 7 of clubs,
Playing A of spades,
Playing 9 of hearts,
Playing 7 of clubs,
Playing A of spades,
Playing 9 of hearts,
Playing 7 of clubs,
Playing A of spades,
Playing 9 of hearts,
Playing 7 of clubs,
Playing A of spades,
Playing 9 of hearts,
Playing 7 of clubs,
Playing A of spades,
Playing 9 of hearts,
Playing 7 of clubs,
Playing A of spades,
Playing 9 of hearts,
Playing 7 of clubs,
Playing A of spades,
Playing 9 of hearts,
Playing 7 of clubs,
Playing A of spades,
Playing 9 of hearts,
Playing 7 of clubs,
Playing A of spades,
Playing 9 of hearts,
Playing 7 of clubs,
Playing A of spades,
Playing 9 of hearts,
Playing 7 of clubs,
Playing A of spades,
Playing 9 of hearts,
Playing 7 of clubs,
Playing A of spades,
Playing 9 of hearts,
Playing 7 of clubs,
Playing A of spades,
Playing 9 of hearts,
Playing 7 of clubs,
Playing A of spades,
Hand is empty!
*/
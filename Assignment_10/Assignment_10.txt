//Assignment_10 Managing a Sorted java.util List and java.util Stack
// by Lexin Ma 3/18/20
//------------option A-----------------------------
//card class
public class Card
{
   public static enum Suit 
   { 
      clubs, diamonds, hearts, spades 
   };
   private Suit suit;
   private char value;
   private boolean cardError;
   protected static char[] valueRanks = { '2', '3', '4', '5', '6', '7', '8', '9', 
         'T', 'J', 'Q', 'K', 'A'};
      protected static Suit[] suitRanks = {Suit.clubs, Suit.diamonds, Suit.hearts, 
         Suit.spades};
      protected static final int NUM_VALS = 13; 
     
   Card()
   {
      this('A', Suit.spades);
   }
   
   Card(char value, Suit suit)
   {
      set(value, suit);
   }
   
   Card(Card card)
   {
      this.value = card.value;
      this.suit = card.suit;
   }
      
   private boolean isValid(char value, Suit suit)
   {
      char upVal;  
      upVal = Character.toUpperCase(value);
      
      if(upVal == 'A' || upVal == 'K'
         || upVal == 'Q' || upVal == 'J'
         || upVal == 'T'
         || (upVal >= '2' && upVal <= '9'))
         
         return true;
      
      else 
         return false;         
   }
  
   public boolean set(char value, Suit suit)
   {      
      if ( isValid(value,suit) )
      { 
         this.value = Character.toUpperCase(value);
         this.suit = suit;
         this.cardError = false;
      }
      else
         this.cardError = true;
        
      return !cardError;       
   }
   
   public char getValue()
   {
      return this.value;
   }
   
   public Suit getSuit()
   {
      return this.suit;
   }
   
   public String toString()
   {
      String retVal;
      retVal =  String.valueOf(value);

      if (!set(value,suit))
         return "This card value " + retVal + "is invalid.";
      else 
         return retVal + " of " + suit + ",";
   }
     
   boolean equals(Card card)
   {
      if(this.value == card.value && this.suit == card.suit)
         return cardError = false;
      
      else return cardError = true;     
   }
   
   // sort member methods
   public int compareTo(Card other)
   {
      if (this.value == other.value)
         return ( getSuitRank(this.suit) - getSuitRank(other.suit) );

      return ( 
            getValueRank(this.value) 
            - getValueRank(other.value) 
            );
   }

   public static int getSuitRank(Suit st)
   {
      int k;
      for (k = 0; k < 4; k++) 
         if (suitRanks[k] == st)
            return k;
      
      // should not happen
      return 0;
   }

   public  static int getValueRank(char val)
   {
      int k;
      for (k = 0; k < NUM_VALS; k++) 
         if (valueRanks[k] == val)
            return k;

      // should not happen
      return 0;
   }
}

//Node class
public class Node<E>
{
   protected Node<E> next;
   private E data;
   
   public Node()
   {
      next = null;
   }

   public Node(E data)
   {
      setData(data);
   }
   
   public boolean setData(E data)
   {
      if (data == null)
         return false;
      this.data = data;
      return true;
   }
   
   public E getData()
   {
      return data;
   }
   
   public String toString()
   {
      return data.toString();
   }

   // insert after
   public void insertAfter(E data)
   {
      if (data == null)
         return;
      Node<E> newNode = new Node<E>(data);
      newNode.next = next;
      next = newNode;
   }

   // remove after
   public E removeAfter()
   {
      Node<E> temp = next;

      if (temp != null)
         next = temp.next;
      return temp.getData();
   }

   // returning the next member
   public E getNext()
   {
      return next.getData();
   }
}

//LinkedList class
public class LinkedList<E>
{
   protected Node<E> head;
   private Node<E> current;
   
   LinkedList()
   {
      head = new Node<E>();
      current = null;
   }
   
   protected void insertAfterHead(E data)
   {   
      head.insertAfter(data);
   }  
   
   protected E removeAfterHead()
   {
     return head.removeAfter();     
   }

   public String toString()
   {
      Node<E> n;
      String ret="";
      
      for( n = head.next; n != null; n = n.next )
      {         
         ret += n.toString();         
      }
      return ret;
   }

   protected Node<E> getCurrent()
   {
      return current;
   }

   protected void resetCurrent()
   {
      current = head;
   }

   protected Node<E> iterate()
   {
      if (current != null)
         current = current.next;
      return current;
   }

}

//main class
public class Foothill
{
   public static void main(String[] args)
   {
      int k;
      
     /* Card first = new Card('A', Card.Suit.spades);
      Card second = new Card('4', Card.Suit.hearts);
      Card third = new Card('T', Card.Suit.clubs);
      
      System.out.println( "should all be 0:\n"); 
      System.out.println( first.compareTo( first ) );
      System.out.println( second.compareTo( second ) );
      System.out.println( third.compareTo( third ) );
      
      System.out.println( "\nshould all be < 0:\n"); 
      System.out.println( second.compareTo( first ) );
      System.out.println( second.compareTo( third ) );
      System.out.println( third.compareTo( first ) );
      
      System.out.println( "\nshould all be > 0:\n"); 
      System.out.println( first.compareTo( second ) );
      System.out.println( third.compareTo( second ) );
      System.out.println( first.compareTo( third ) );
      
      System.out.println( "\nSome random cards:\n");
      for ( k = 0; k < 50; k++ )
      {
         System.out.print( generateRandomCard().toString() + "  ");
      }
      System.out.println();*/
      
      //cardlist
      LinkedList<Card> myList = new LinkedList<Card>();
      
      // build list of 10 cards, 2 at a time 
      for (k = 0; k < 5; k++)
      {
         Card ncard = new Card(generateRandomCard());
         insertCard(myList,ncard);
         insertCard(myList,ncard);
        
      }      
      System.out.println(myList.toString());

      Node dn1 = myList.getCurrent();
      Card dcard1 = (Card) dn1.getData();      
      //remove same nodes one by one     
      while(removeCard(myList,dcard1))
         removeCard(myList,dcard1);
      
      System.out.println("\n" + dcard1 + " removed");         
      System.out.println("\n" + myList.toString());
      
      
      Node dn2 = myList.getCurrent();
      Card dcard2 = (Card) dn2.getData();
      //remove same cards all at once
      removeAll(myList,dcard2);
      
      System.out.println("\n" + dcard2 + " removed");         
      System.out.println("\n" + myList.toString());
      
      Card card = new Card('A',Card.Suit.clubs);
      if(removeAll(myList,card))
         System.out.println("\n" + card + " removed"); 
      else System.out.println("\n" + card +" was not in the list"); 
      
   }

   static void insertCard(LinkedList<Card> my_List, Card card)
   {  
      Node np,fp;
              
      for (my_List.resetCurrent(); (np = my_List.getCurrent()) != null; 
            my_List.iterate() )
      {
         if (np.next == null)
            break;
            
         fp = np.next;
         if(card.compareTo((Card) fp.getData()) <= 0)
            break;   
      }
      np.insertAfter(card);      
   }
      
   static boolean removeCard(LinkedList<Card> my_List, Card card) 
   {      
      Node np,fp;
                 
      for(my_List.resetCurrent(); (np = my_List.getCurrent())!= null;
            my_List.iterate() )
      {
         if(np.next == null)
            return false;
            
         fp = np.next;
         if(card.compareTo((Card) fp.getData()) == 0)
         {
            np.removeAfter();
            return true;
         }            
       }
      return false;
   }
         
   static Card generateRandomCard()
   {
      // if firstTime = true, use clock to seed, else fixed seed for debugging
      Card.Suit suit;
      char val;

      int suitSelector, valSelector;

      // get random suit and value
      suitSelector = (int) (Math.random() * 4);
      valSelector = (int) (Math.random() * 13);

      // pick suit
      suit = Card.Suit.values()[suitSelector];
      val = turnIntIntoVal(valSelector);

      return new Card(val, suit);
   }
  
   static char turnIntIntoVal(int k)
   {
      String legalVals = "23456789TJQKA";
      
      if (k < 0 | k >= legalVals.length())
         return '?';
      return legalVals.charAt(k);
   }
      
   static boolean removeAll(LinkedList<Card> my_List, Card card)
   {
      Node np,fp;
      
      for(my_List.resetCurrent(); (np = my_List.getCurrent())!= null;  )
      {
            if(np.next == null)
               return false;
         
            fp = np.next;
            if(card.compareTo((Card) fp.getData()) == 0)
            {
               np.removeAfter();           
            }
            else
               my_List.iterate();
         }      
      return false;     
   }
}

/*--------------console test------------
5 of diamonds,5 of diamonds,6 of spades,6 of spades,7 of diamonds,7 of diamonds,
J of spades,J of spades,A of hearts,A of hearts,

5 of diamonds, removed

6 of spades,6 of spades,7 of diamonds,7 of diamonds,J of spades,J of spades,A of
 hearts,A of hearts,

A of hearts, removed

6 of spades,6 of spades,7 of diamonds,7 of diamonds,J of spades,J of spades,

A of clubs, was not in the list
*/
 




